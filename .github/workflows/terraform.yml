# This workflow installs the latest version of Terraform CLI. On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan`. On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    #Get credentials for Service Account using OIDC  
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        create_credentials_file: 'true'
        workload_identity_provider: 'projects/465996088825/locations/global/workloadIdentityPools/telenor-idpool/providers/telenor-git-provider'
        service_account: 'terraform-sa-demo@test-project-350005.iam.gserviceaccount.com'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Check credentials file
      run: cat ${{ steps.auth.outputs.credentials_file_path }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd gh-runner-gke && terraform init
      env:
        GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: cd gh-runner-gke && terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd gh-runner-gke && terraform plan -input=false
      env:
        GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"

    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
    #   env:
    #     GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"